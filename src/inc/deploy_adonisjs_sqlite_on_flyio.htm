<h2>Deploy AdonisJS with SQLite on Fly.io</h2>

<p>This guide provides instructions for deploying an AdonisJS with SQLite application on <a href="https://fly.io/">Fly.io</a>.</p>

<p>Deploying an AdonisJS application is no different from deploying a standard Node.js application. You just have to
  keep a few things in mind:</p>

<ul>
  <li>You build your TypeScript source to JavaScript, before deploying the app.</li>
  <li>You will have to start the server from the build folder and not the project root. Same is true for running
    migrations any other Node.js apps.</li>
</ul>

<p>You can build your project for production by running the following ace command. Learn more about the <a
    href="https://docs.adonisjs.com/guides/typescript-build-process">TypeScript build process</a>.</p>

<h3>Pre-requisite</h3>

<ul>
  <li><a href="https://fly.io/docs/hands-on/install-flyctl/">fly</a></li>
</ul>

<h3>Launch App</h3>

<p><strong>fly launch</strong> helps us to initialize our application. In every <strong>fly launch</strong> application it uses a
  <strong>fly.toml</strong> file to tell the system how to deploy it.</p>

<p>The <strong>fly.toml</strong> file can be automatically generated by <strong>fly launch</strong> command, and prompt
  question on how to setup your application.</p>

<p>Run: <strong>fly launch</strong></p>

<ul>
  <li><strong>? Choose an app name (leave blank will default to 'app-name'):</strong> here you can enter the name of your application.</li>
  <li><strong>? Select organization: Personal (personal):</strong> if you have other organization you can select them else it automatically select personal.</li>
  <li><strong>? Choose a region for deployment:</strong> I recommend region that is near in your location. So I choose Singapore.</li>
  <li><strong>? Would you like to setup Postgres or Redis:</strong> enter N, because we are using SQLite.</li>
  <li><strong>? Would you like to deploy now?:</strong> enter N, because we need to define our secrets or environments on the application.</li>
</ul>

<p>After that, <strong>fly launch</strong> command would generate some files like Dockerfile, docker-entrypoints.js, and
  fly.toml</p>

<p>We need also to update fly.toml to migrate your migrations by <a href="https://fly.io/docs/reference/configuration/#the-experimental-section" target="_blank">experimental</a>.</p>

<pre>
app = "your-app"
primary_region = "sin"

[experimental]
  cmd = ["start.sh"]
  entrypoint = ["sh"]

[env]
  DB_CONNECTION = "sqlite"

[[mounts]]
  source = "data"
  destination = "/data"

[http_service]
  internal_port = 3000
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0
  processes = ["app"]
</pre>

<p>As you can see we have experimental section on our fly.toml and we need to create <strong>start.sh</strong> shell script in order to execute our entry point.</p>

<p>On <strong>start.sh</strong> script add:</p>

<pre>
#!/bin/sh

set -ex
node /app/build/ace migration:run --force
node /app/build/server.js
</pre>

<h3>Defining environment variables</h3>

<p>Before deploying your application, we need to define environment variables through <strong>fly secrets set</strong> command. Some environment variables are already defined on Dockerfile, and we need to update our <strong>DATBASE_URL</strong> to <strong>"/data/app.db"</strong>.</p>

<pre>
ENV CACHE_VIEWS="true" \
    DATABASE_URL="/data/app.db" \
    DRIVE_DISK="local" \
    HOST="0.0.0.0" \
    PORT="3000" \
    SESSION_DRIVER="cookie"
</pre>

<p>We need to update SQLite "<strong>connections.sqlite.connection.filename</strong>" on <strong>config/database.ts</strong>. You can update like this:</p>

<pre>
filename: ['test', 'development'].includes(Env.get('NODE_ENV'))
  ? Application.tmpPath(Env.get('app.db'))
  : Env.get('DATABASE_URL'),
</pre>

<p>Also, when we're deploying Adonis application, we should generate <strong>APP_KEY</strong> because it used for all encryption data, cookie, and sessions. To generate a new <strong>APP_KEY</strong>, we need to execute <strong>node ace generate:key</strong> and copy the generated key.</p>

<p>Run <strong>fly secrets set</strong> command to define your environment variables.</p>

<pre>
fly secrets set APP_KEY=generated-key SOME_ENV=some-env OTHER_KEYS=other-keys
</pre>

<h3>Deploy your application</h3>

<p>When you're done defining environment variables and modified some database config. Finally, you can run the <strong>fly deploy</strong> command in order to deploy your application to <strong>fly.io</strong>.</p>

<p>You can monitor your application on fly.io dashboard, and you can check if there's an error or success.</p>

<p>I hope this guide help you to deploy your AdonisJS with SQLite on fly.io. You can check some common issue section that I also encountered during the experiment.</p>

<h3>Common Issues</h3>

<p>If you're encounter some problem like this:</p>

<p>`error umounting /data: EBUSY: Device or resource busy, retrying in a bit`</p>
<p>Solution: <strong>fly apps restart app-name</strong></p>

<h3>References</h3>

<ul>
  <li><a href="https://docs.adonisjs.com/cookbooks/deploy-to-heroku#adding-the-procfile">AdonisJS Cookbook: Deployment Heroku</a></li>
  <li><a href="https://fly.io/docs/hands-on/">Hands-on with Fly.io</a></li>
</ul>
